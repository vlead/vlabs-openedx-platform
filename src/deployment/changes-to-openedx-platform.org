#+TITLE: Modifyting Reverse Proxy on Open edX platform for altering content.
#+AUTHOR: VLEAD
#+DATE: [2017-11-27 Mon]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document lists steps to alter the content before it
  is served by Open edX.
* Configure nginx to include user defined code.
  Nginx web server is configured to append new html to the
  default content of a route.
** Provision to post a message
   Whenever =dashboard= route is requested, the vlabs
   landing pages is required to know the content of the
   dashboard.  To enable this, a javascript snippet is
   appended along with the default =dashboard= content. 

   Place the following snippet inside
   =/edx/var/nginx/server-static/message.html=.  In the
   below code snippet =http://alpha.vlabs.ac.in= is the name
   of the service hosting vlabs landing pages where all post
   messages will be sent.

#+NAME: post-msg-conf
#+BEGIN_SRC html
<html>
  <head>
    <script>
      var postM = function() {
      textOfContentIframe = document.body.innerText;
      var json = {message: textOfContentIframe, referrer: document.referrer};
      console.log(JSON.stringify(json));
      msg = window.parent.postMessage(JSON.stringify(json), "http://alpha.base4.vlabs.ac.in");
      };
    </script>
  </head>
  <body onload="postM();">
  </body>
</html>
#+END_SRC

** Append JS functions for every course page. 
   Javascript functions to post to feedback and usage
   services are required for the course pages.  To provide
   this functionality the following code snippet is
   configured in =openedx= server.  

   Place the following snippet inside
   =/edx/var/nginx/server-static/utils.html=.  Also,
   configure =usageUrl= and =feedbackBaseUrl= variables as
   per the environment (e.g test, stage or production).
#+NAME: funcs-to-submt-usage-feedback
#+BEGIN_SRC html
<html>
  <head>
    <script>
      var usageUrl = "http://analytics.base1.vlabs.ac.in/openedx/add_usage";
      var feedbackBaseUrl = "http://feedback.base1.vlabs.ac.in"
      var key = "defaultkey";

      var submitUsage = function(labId, expName, labName, userId, expId) {

         var xhttp = new XMLHttpRequest();
         xhttp.open("POST", usageUrl);
         xhttp.setRequestHeader("Content-Type", "application/json");
         var payload = {lab_id: labId, lab_name: labName, exp_id: expId, exp_name: expName, user_id: userId};
         xhttp.send(JSON.stringify(payload));

      };

      var submitFeedback = function(labId, labName, expId, expName, userId) {
      if (expId == "" || expName == "")
      {
      feedback_url = feedbackBaseUrl + "/feedback?lab_name=" + labName + "&key=" + key + "&user_id=" + userId;
      window.open(feedback_url, '_blank');
      }
      else {
      ///Experiment wise feedback
      feedback_url = feedbackBaseUrl + "/feedback?lab_name=" + labName + "&exp_name=" + expName + "&key=" + key + "&user_id=" + userId;
      window.open(feedback_url, '_blank');
      }
      };
    </script>
  </head>
</html>

#+END_SRC

** Configure the routes
   Backup the original file =lms= as =lms.bk= and copy the
   below content to the file =lms= at
   =/edx/app/nginx/sites-available/=.  Here, the routes are
   configured only for http.  The same =server=
   configuration is replicated for https while =listen= is
   changed to =443=.

#+NAME: nginx-route-conf
#+BEGIN_SRC html
upstream lms-backend {
            server 127.0.0.1:8000 fail_timeout=0;
    
}


server {
  # LMS configuration file for nginx, templated by ansible

  
  # error pages
  error_page 504 /server/server-error.html;
  error_page 502 /server/server-error.html;
  error_page 500 /server/server-error.html;
  
  listen 80 default_server;

  
  # Prevent invalid display courseware in IE 10+ with high privacy settings
  add_header P3P 'CP="Open edX does not have a P3P policy."';


  # Nginx does not support nested condition or or conditions so
  # there is an unfortunate mix of conditonals here.
    
  access_log /edx/var/log/nginx/access.log p_combined;
  error_log /edx/var/log/nginx/error.log error;

  # CS184 requires uploads of up to 4MB for submitting screenshots.
  # CMS requires larger value for course assest, values provided
  # via hiera.
  client_max_body_size 4M;

  rewrite ^(.*)/favicon.ico$ /static/images/favicon.ico last;

  
  # Blackholes an archive of python library files that instructors
  # may provide for sandboxed python problem types, the internal
  # directive will result in nginx emitting an nginx 404. Users
  # will not be redirected to the application 404 page.
  location ~* python_lib.zip {
    internal;
  }
  
# Common settings used across nginx configurations

# Disables server version feedback on pages and in headers
server_tokens off;

  location @proxy_to_lms_app {
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-For $remote_addr;
    
    # newrelic-specific header records the time when nginx handles a request.
    proxy_set_header X-Queue-Start "t=${msec}";

    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://lms-backend;
  }

  location @proxy_to_append_utils_lms_app {
    add_after_body /server/utils.html;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-For $remote_addr;
    
    # newrelic-specific header records the time when nginx handles a request.
    proxy_set_header X-Queue-Start "t=${msec}";

    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://lms-backend;
  }

  location @proxy_to_append_lms_app {
    add_after_body /server/message.html;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-For $remote_addr;
    
    # newrelic-specific header records the time when nginx handles a request.
    proxy_set_header X-Queue-Start "t=${msec}";

    proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://lms-backend;
  }

  location / {
    
    try_files $uri @proxy_to_lms_app;
  }

  location /dashboard {
    
    try_files $uri @proxy_to_append_lms_app;
  }

  # /login?next=<any image> can be used by 3rd party sites in <img> tags to
  # determine whether a user on their site is logged into edX.
  # The most common image to use is favicon.ico.
  location /login {
    
    if ( $arg_next ~* "favicon.ico" ) {
      return 403;
    }

    try_files $uri @proxy_to_lms_app;
  }


  # No basic auth for /segmentio/event
  location /segmentio/event {
    try_files $uri @proxy_to_lms_app;
  }

  # The api is accessed using OAUTH2 which
  # uses the authorization header so we can't have
  # basic auth on it as well.
  location /api {
    try_files $uri @proxy_to_lms_app;
  }

  #enterprise API
  location /enterprise/api {
    try_files $uri @proxy_to_lms_app;
  }

  # Need a separate location for the image uploads endpoint to limit upload sizes
  location ~ ^/api/profile_images/[^/]*/[^/]*/upload$ {
    try_files $uri @proxy_to_lms_app;
    client_max_body_size 1049576;
  }

  location /notifier_api {
    try_files $uri @proxy_to_lms_app;
  }

  location /user_api {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on the github_service_hook url, so that github can use it for cms
  location /github_service_hook {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on oauth2 endpoint
  location /oauth2 {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on third party auth endpoints
  location /auth {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on assets
  location /c4x {
    try_files $uri @proxy_to_lms_app;
  }

  location /asset {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it
  location /heartbeat {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth on the LTI provider endpoint, it does OAuth1
  location /lti_provider {
    try_files $uri @proxy_to_lms_app;
  }

  # No basic auth on LTI component grade.
  location ~ /handler_noauth {
    try_files $uri @proxy_to_lms_app;
  }

  location /courses {
    try_files $uri @proxy_to_append_utils_lms_app;
  }

location ~ ^/media/(?P<file>.*) {
    root /edx/var/edxapp/media;
    try_files /$file =404;
    expires 31536000s;
}

      # static pages for server status
  location ~ ^/server/(?P<file>.*) {
      root /edx/var/nginx/server-static;
      try_files /$file =404;
  }

  location ~ ^/static/(?P<file>.*) {
    root /edx/var/edxapp;
    try_files /staticfiles/$file /course_static/$file =404;

    # return a 403 for static files that shouldn't be
    # in the staticfiles directory
    location ~ ^/static/(?:.*)(?:\.xml|\.json|README.TXT) {
        return 403;
    }

    # http://www.red-team-design.com/firefox-doesnt-allow-cross-domain-fonts-by-default
    location ~ "/static/(?P<collected>.*\.[0-9a-f]{12}\.(eot|otf|ttf|woff|woff2)$)" {
        expires max;
        add_header Access-Control-Allow-Origin *;
        try_files /staticfiles/$collected /course_static/$collected =404;
    }

    # Set django-pipelined files to maximum cache time
    location ~ "/static/(?P<collected>.*\.[0-9a-f]{12}\..*)" {
        expires max;
        # Without this try_files, files that have been run through
        # django-pipeline return 404s
        try_files /staticfiles/$collected /course_static/$collected =404;
    }

    # Set django-pipelined files for studio to maximum cache time
    location ~ "/static/(?P<collected>[0-9a-f]{7}/.*)" {
        expires max;

        # Without this try_files, files that have been run through
        # django-pipeline return 404s
        try_files /staticfiles/$collected /course_static/$collected =404;
    }

    # Expire other static files immediately (there should be very few / none of these)
    expires 300;
  }


}
#+END_SRC

* Configure x-frame options
  By default =x-frame= http response header of pages served
  from OpenEdx are set to =DENY= for security reasons. To
  enable loading all these pages inside iframes this is to
  be set to =ALLOW=.  To enable this feature change
  =x_frame_option= value from =DENY= to =ALLOW= in
  =/edx/app/edxapp/edx-platform/common/djangoapps/third_party_auth/decorators.py=
  #+BEGIN_EXAMPLE
  #x_frame_option = 'DENY'
  x_frame_option = 'ALLOW'
  #+END_EXAMPLE

#+NAME: conf-to-enble-xframe-option
#+BEGIN_SRC python

from functools import wraps

from django.conf import settings
from django.core.urlresolvers import reverse
from django.shortcuts import redirect
from django.utils.decorators import available_attrs

from six.moves.urllib.parse import urlencode, urlparse
from third_party_auth.models import LTIProviderConfig
from third_party_auth.provider import Registry


def xframe_allow_whitelisted(view_func):

    def wrapped_view(request, *args, **kwargs):
        """ Modify the response with the correct X-Frame-Options. """
        resp = view_func(request, *args, **kwargs)
        x_frame_option = 'ALLOW'
        if settings.FEATURES['ENABLE_THIRD_PARTY_AUTH']:
            referer = request.META.get('HTTP_REFERER')
            if referer is not None:
                parsed_url = urlparse(referer)
                hostname = parsed_url.hostname
                if LTIProviderConfig.objects.current_set().filter(lti_hostname=hostname, enabled=True).exists():
                    x_frame_option = 'ALLOW'
        resp['X-Frame-Options'] = x_frame_option
        return resp
    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)


def tpa_hint_ends_existing_session(func):


    @wraps(func)
    def inner(request, *args, **kwargs):

        sso_provider = None
        provider_id = request.GET.get('tpa_hint')
        decorator_already_processed = request.GET.get('session_cleared') == 'yes'
        if provider_id and not decorator_already_processed:

            if request.user and request.user.is_authenticated():
                try:
                    sso_provider = Registry.get(provider_id=provider_id)
                except ValueError:
                    sso_provider = None
        if sso_provider and sso_provider.drop_existing_session:

            return redirect(
                '{}?{}'.format(
                    request.build_absolute_uri(reverse('logout')),
                    urlencode(
                        {
                            'redirect_url': '{}?{}'.format(
                                request.path,
                                urlencode(
                                    [
                                        ('tpa_hint', provider_id),
                                        ('session_cleared', 'yes')
                                    ]
                                )
                            )
                        }
                    )
                )
            )

        else:
            return func(request, *args, **kwargs)

    return inner
  
  #+END_SRC

* Delete header and footer pages
  Header and footer are disbled by commenting the =header=
  and =footer= pages from openedx comment out below lines
  from file
  =/edx/app/edxapp/edx-platform/lms/templates/main.html=
  #+BEGIN_EXAMPLE
  ##<%static:optional_include_mako file="body-initial.html" is_theming_enabled="True" />
  ## % if not disable_header:
  ##   <%include file="${static.get_template_path('header.html')}" args="online_help_token=online_help_token" />
  ## <%include file="/preview_menu.html" />
  ##% endif

  ##  % if not disable_footer:
  ##    <%include file="${static.get_template_path('footer.html')}" />
  ##% endif
  #+END_EXAMPLE
#+NAME: rm-header-footer
#+BEGIN_SRC html
## coding=utf-8

## This is the main Mako template that all page templates should include.
## Note: there are a handful of pages that use Django Templates and which
## instead include main_django.html. It is important that these two files
## remain in sync, so changes made in one should be applied to the other.

## Pages currently use v1 styling by default. Once the Pattern Library
## rollout has been completed, this default can be switched to v2.
<%! main_css = "style-main-v1" %>


<%namespace name='static' file='static_content.html'/>
<% online_help_token = self.online_help_token() if hasattr(self, 'online_help_token') else None %>
<%!
from branding import api as branding_api
from django.core.urlresolvers import reverse
from django.utils.http import urlquote_plus
from django.utils.translation import ugettext as _
from django.utils.translation import get_language_bidi
from openedx.core.djangolib.js_utils import dump_js_escaped_json, js_escaped_string
from pipeline_mako import render_require_js_path_overrides

%>
<!DOCTYPE html>
<!--[if lte IE 9]><html class="ie ie9 lte9" lang="${LANGUAGE_CODE}"><![endif]-->
<!--[if !IE]><!--><html lang="${LANGUAGE_CODE}"><!--<![endif]-->
<head dir="${static.dir_rtl()}">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

## Define a couple of helper functions to make life easier when
## embedding theme conditionals into templates. All inheriting
## templates have access to these functions, and we can import these
## into non-inheriting templates via the %namespace tag.

## this needs to be here to prevent the title from mysteriously appearing in the body, in one case
<%def name="pagetitle()" />
  <%block name="title">
      <title>
       ${static.get_page_title_breadcrumbs(self.pagetitle())}
      </title>
  </%block>

  % if not allow_iframing:
      <script type="text/javascript">
        /* immediately break out of an iframe if coming from the marketing website */
        (function(window) {
          if (window.location !== window.top.location) {
            window.top.location = window.location;
          }
        })(this);
      </script>
  % endif

  <%
    jsi18n_path = "js/i18n/{language}/djangojs.js".format(language=LANGUAGE_CODE)
  %>

  <script type="text/javascript" src="${static.url(jsi18n_path)}"></script>

  <link rel="icon" type="image/x-icon" href="${static.url(static.get_value('favicon_path', settings.FAVICON_PATH))}" />

  <%static:css group='style-vendor'/>
  % if uses_bootstrap:
    <link rel="stylesheet" href="${static.url(self.attr.main_css)}" type="text/css" media="all" />
  % else:
    <%static:css group='${self.attr.main_css}'/>
  % endif

  % if disable_courseware_js or uses_pattern_library:
    <%static:js group='base_vendor'/>
    <%static:js group='base_application'/>
  % else:
    <%static:js group='main_vendor'/>
    <%static:js group='application'/>
  % endif

  % if uses_bootstrap:
    <%static:js group='lms_bootstrap'/>
  % endif

  <script>
    window.baseUrl = "${settings.STATIC_URL | n, js_escaped_string}";
    (function (require) {
      require.config({
          baseUrl: window.baseUrl
      });
    }).call(this, require || RequireJS.require);
  </script>
  <script type="text/javascript" src="${static.url("lms/js/require-config.js")}"></script>
  <%block name="js_overrides">
    ${render_require_js_path_overrides(settings.REQUIRE_JS_PATH_OVERRIDES) | n, decode.utf8}
  </%block>

  % if not disable_courseware_js:
    <%static:js group='module-js'/>
  % endif

  <%block name="headextra"/>
  <%block name="head_extra"/>

  <%include file="/courseware/experiments.html"/>
  <%static:optional_include_mako file="head-extra.html" is_theming_enabled="True" />

  <%include file="widgets/optimizely.html" />
  <%include file="widgets/segment-io.html" />

  <meta name="path_prefix" content="${EDX_ROOT_URL}">
  <meta name="google-site-verification" content="_mipQ4AtZQDNmbtOkwehQDOgCxUUV2fb_C0b6wbiRHY" />

<% ga_acct = static.get_value("GOOGLE_ANALYTICS_ACCOUNT", settings.GOOGLE_ANALYTICS_ACCOUNT) %>
% if ga_acct:
    <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', '${ga_acct | n, js_escaped_string}']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
    </script>
% endif

</head>

<body class="${static.dir_rtl()} <%block name='bodyclass'/> lang_${LANGUAGE_CODE}">

##<%static:optional_include_mako file="body-initial.html" is_theming_enabled="True" />
<div id="page-prompt"></div>
% if not disable_window_wrap:
  <div class="window-wrap" dir="${static.dir_rtl()}">
% endif
    <a class="nav-skip sr-only sr-only-focusable" href="#main">${_("Skip to main content")}</a>

##    % if not disable_header:
##        <%include file="${static.get_template_path('header.html')}" args="online_help_token=online_help_token" />
##        <%include file="/preview_menu.html" />
##    % endif

    <div class="content-wrapper ${"container-fluid" if uses_bootstrap else "" } main-container" id="content">
      ${self.body()}
      <%block name="bodyextra"/>
    </div>

##    % if not disable_footer:
##        <%include file="${static.get_template_path('footer.html')}" />
##    % endif

% if not disable_window_wrap:
  </div>
% endif

  <%block name="footer_extra"/>
  <%block name="js_extra"/>

  <%include file="widgets/segment-io-footer.html" />
  <script type="text/javascript" src="${static.url('js/vendor/noreferrer.js')}" charset="utf-8"></script>
  <script type="text/javascript" src="${static.url('js/utils/navigation.js')}" charset="utf-8"></script>
  <%static:optional_include_mako file="body-extra.html" is_theming_enabled="True" />
</body>
</html>

<%def name="login_query()">${
  u"?next={0}".format(urlquote_plus(login_redirect_url)) if login_redirect_url else ""
}</%def>

<!-- Performance beacon for onload times -->
% if settings.FEATURES.get('ENABLE_ONLOAD_BEACON', False):
<script>
  (function () {
    var sample_rate = ${settings.ONLOAD_BEACON_SAMPLE_RATE | n, dump_js_escaped_json};
    var roll = Math.floor(Math.random() * 100)/100;
    var onloadBeaconSent = false;

    if(roll < sample_rate){
      $(window).load(function() {
        setTimeout(function(){
          var t = window.performance.timing;

          var data = {
            event: "onload",
            value: t.loadEventEnd - t.navigationStart,
            page: window.location.href,
          };

          if (!onloadBeaconSent) {
            $.ajax({method: "POST", url: "/performance", data: data});
          }
          onloadBeaconSent = true;
        }, 0);
      });
    }
  }());
</script>
% endif


#+END_SRC
* COMMENT Create HTML and JS
  This is not necessary. 
  Insert JS code in an html file to remove the header and
  footer of a default Open edX page.  The file
  =alter-content.html= is created at location
  =/edx/var/nginx/server-static/=
  
  The contents of this file are below.

  #+BEGIN_EXAMPLE
   <html>
     <head>
       <script>
         var delHeader = function() {
         headerElem = document.getElementById('global-navigation')
         headerElem.parentNode.removeChild(headerElem)
         };

         var delFooter = function() {
         var elements = document.getElementsByClassName('wrapper-footer');
         while(elements.length > 0) {
           elements[0].parentNode.removeChild(elements[0]);
         }
         };

         var delHeaderAndFooter = function() {
         delHeader();
         delFooter();
         };


       </script>
     </head>
     <body onload="delHeaderAndFooter();">
     </body>
   </html>
  #+END_EXAMPLE

* Restart the services
  Restart services on Open edX to pick the new configuration
  changes.
  #+BEGIN_EXAMPLE
  /edx/bin/supervisorctl restart edxapp:
  #+END_EXAMPLE

* Tangle
** main.html

#+BEGIN_SRC html :tangle main.html :eval no :noweb yes 
<<rm-header-footer>>
#+END_SRC

** decorators.py

#+BEGIN_SRC python :tangle decorators.py :eval no :noweb yes 
<<conf-to-enble-xframe-option>>
#+END_SRC

** lms

#+BEGIN_SRC conf :tangle lms :eval no :noweb yes 
<<nginx-route-conf>>
#+END_SRC
** message.html

#+BEGIN_SRC html :tangle message.html :eval no :noweb yes 
<<post-msg-conf>>
#+END_SRC
** utils.html

#+BEGIN_SRC html :tangle utils.html :eval no :noweb yes 
<<funcs-to-submt-usage-feedback>>
#+END_SRC

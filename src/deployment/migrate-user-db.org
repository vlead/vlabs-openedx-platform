#+TITLE: Migrate user database from Dogwood to Ginkgo version
#+AUTHOR: VLEAD
#+DATE: [2017-12-11 Mon]
#+SETUPFILE: ./org-templates/level-0.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document has script to migrate the user database from
  =Dogwood= to =Ginkgo= version
* Use case scenario
  Currently VLEAD is using OpenEdx platform of =dogwood=
  version to host the Virtual Labs. To upgrade this version
  to =Ginkgo= all the courses and user database has to be
  migrated.
  
* Steps to migrate user database from dogwood to ginkgo
** Restore dogwood database dump into mysql temporary database
  1. Log into the database
     #+BEGIN_EXAMPLE
     mysql -u root -p
     #+END_EXAMPLE
  2. Create a database with name =dogwood=
     #+BEGIN_EXAMPLE
     mysql> create database dogwood;
     #+END_EXAMPLE
  3. Exit from the mysql server
     #+BEGIN_EXAMPLE
     > exit
     #+END_EXAMPLE
  4. Import sql file into =dogwood= database
     #+BEGIN_EXAMPLE
     mysql -u root -p dogwood < <file-name>.sql
     #+END_EXAMPLE
** Steps to run user database migration script

    1. Clone the repository
       #+BEGIN_EXAMPLE
       git clone https://github.com/vlead/vlabs-openedx-platform
       #+END_EXAMPLE
    2. Change directory to =vlabs-openedx-platform= and
       checkout branch to =develop=
       #+BEGIN_EXAMPLE
       cd vlabs-openedx-platform
       git checkout develop
       #+END_EXAMPLE
    3. Build the sources
       #+BEGIN_EXAMPLE
       make
       #+END_EXAMPLE
    4. Changed directory to deployment folder
       #+BEGIN_EXAMPLE
       cd build/code/deployment
       #+END_EXAMPLE
    5. Configure the variables =HOST= , =USER= and
       =PASSWORD= of mysql server.
       as 
       #+BEGIN_EXAMPLE
       HOST="localhost"
       USER="root"
       PASSWORD=""
       SRC_DB = "dogwood"
       DEST_DB = "edxapp"

       #+END_EXAMPLE
    6. Run the script
       #+BEGIN_EXAMPLE
       python migrate-usr-db.py
       #+END_EXAMPLE
    7. If step(6) is successful delete the =dogwood= database
* Migration Script
** Connect to database
  This function connects to mysql database and returns the
  connection object
  #+NAME: connect-db
  #+BEGIN_SRC python

def connect_db(db_name):

    config = {
        'user': USER,
        'passwd': PASSWORD,
        'host': HOST,
        'db': db_name
        }
    try:
        cnx = MySQLdb.connect(**config)
        print "connected to database"
        return cnx
    except Exception as err:
        print(err)
        exit(1)

  #+END_SRC
** Get users from dogwood database
  This function fetches the users from the dogwood version
  of openedx database and returns the list contained all the
  user information
  #+NAME: get-users-dogwood-db
  #+BEGIN_SRC python

def get_users_from_dogwood_db(cnx):
    cursor = cnx.cursor()
    print "get_users_from_dogwood_db"
    query = "select * from auth_user"
    cursor.execute(query)
    users = cursor.fetchall()
    users_list = []

    for user in users:
        user_dict = {}
        user_dict["id"] = int(user[0])
        user_dict["password"] = user[1]
        user_dict["last_login"] = user[2]
        user_dict["is_superuser"] = user[3]
        user_dict["username"] = user[4]
        user_dict["first_name"] =  user[5]
        user_dict["last_name"] = user[6]
        user_dict["email"] = user[7]
        user_dict["is_staff"] = user[8]
        user_dict["is_active"] = user[9]
        user_dict["date_joined"] = user[10]
        users_list.append(user_dict)

    return users_list


  #+END_SRC
** Set users into ginkgo database
  This function writes all the users into =ginkgo= version
  of openedx database
  #+NAME: set-users-to-ginkgo-db
  #+BEGIN_SRC python

def set_users_to_ginkgo_db(cnx, user_list):
    cursor = cnx.cursor()
    try:
        for user in user_list:
            query = "insert into %s (password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) values('%s', '%s', %s, '%s', '%s', '%s', '%s', %s, %s, '%s')" %\
 \
                ("auth_user", user['password'], user['last_login'], user['is_superuser'], user['username'], user['first_name'], user['last_name'], user['email'], user['is_staff'], user['is_active'], user['date_\
joined'])

            if user['id'] > 5:
                cursor.execute(query)
                cnx.commit()
            else:
                print user['email']
    except Exception as e:
        print str(e)

        
  #+END_SRC
** Config
  This holds configuration variables
  #+NAME: config
  #+BEGIN_SRC python
HOST="localhost"
USER="root"
PASSWORD="root"
SRC_DB = "dogwood"
DEST_DB = "edxapp"
DEAFULT_USERS = ["staff@example.com"]
  
  #+END_SRC
** Imports
  Required imports
  #+NAME: imports
  #+BEGIN_SRC python
import MySQLdb
from config import *  
  #+END_SRC
** Main function
  #+NAME: main-func
  #+BEGIN_SRC python

if __name__ == "__main__":
    dogwood_db_cnx = connect_db(SRC_DB)
    user_list = get_users_from_dogwood_db(dogwood_db_cnx)
    ginkgo_db_cnx = connect_db(DEST_DB)
    set_users_to_ginkgo_db(ginkgo_db_cnx, user_list)

  #+END_SRC
** Tangle
** sources
#+BEGIN_SRC python :tangle config.py :eval no :noweb yes 
<<config>>
#+END_SRC

#+BEGIN_SRC python :tangle migrate-usr-db.py :eval no :noweb yes 
<<imports>>
<<connect-db>>
<<get-users-dogwood-db>>
<<set-users-to-ginkgo-db>>
<<main-func>>

#+END_SRC
